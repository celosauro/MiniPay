# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # The default should be 'production' in order to mitigate the risk of missing or wrong configuration.
    env(EXCEPTION_LISTENER_MODE): 'production'
    event.store: MiniPay\Framework\DomainEvent\Infrastructure\DoctrineEventStore
    user.repository: MiniPay\Core\User\Infrastructure\Persistence\DoctrineUserRepository
    transaction.auth.client: MiniPay\Core\User\Infrastructure\TransactionAuthClient
    transaction.notificator: MiniPay\Core\User\Infrastructure\TransactionNotificatorclient

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    MiniPay\:
        resource: '../src/*'
        exclude: '../src/{Framework,DependencyInjection,Entity,Tests,Kernel.php}'

    ## Inicio - configs do mensageiro framework
    MiniPay\Framework\:
        resource: '../src/Framework/*'

    MiniPay\Framework\Exception\Infrastructure\SymfonyExceptionListener:
        class: MiniPay\Framework\Exception\Infrastructure\SymfonyExceptionListener
        arguments:
            $debug: '%env(ATTACH_DEBUG_INFORMATION_INTO_HTTP_RESPONSE)%'
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
    ## Fim - configs do mensageiro framework

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    MiniPay\Core\User\Infrastructure\Controller\:
        resource: '../src/Core/User/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    MiniPay\Core\Transaction\Infrastructure\Controller\:
        resource: '../src/Core/Transaction/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Doctrine\Persistence\ObjectManager: '@doctrine.orm.default_entity_manager'
    Doctrine\Common\Persistence\ObjectManager: '@doctrine.orm.default_entity_manager'

    GuzzleHttp\Client:
        class: 'GuzzleHttp\Client'

    # EventStore
    MiniPay\Framework\DomainEvent\Domain\EventStore:
        class: '%event.store%'

    # PersistDomainEventSubscriber
    domain_event.persist_domain_event_subscriber:
        class: MiniPay\Framework\DomainEvent\Domain\PersistDomainEventSubscriber

    # DomainEventPublisher
    MiniPay\Framework\DomainEvent\Domain\DomainEventPublisher:
        class: 'MiniPay\Framework\DomainEvent\Domain\DomainEventPublisher'
        arguments:
            - ['@domain_event.persist_domain_event_subscriber', '@transaction_received.domain_event_subscriber']

    # Repository
    MiniPay\Core\User\Domain\UserRepository:
        class: '%user.repository%'

    MiniPay\Core\User\Domain\TransactionAuth:
        class: '%transaction.auth.client%'

    MiniPay\Core\User\Domain\Notificator:
        class: '%transaction.notificator%'

    # Subscribers
    transaction_received.domain_event_subscriber:
        class: MiniPay\Core\User\Domain\Event\TransactionReceivedSubscriber

    MiniPay\Framework\Serializer\Symfony\ArrayNormalizer:
        tags: ['serializer.normalizer']
